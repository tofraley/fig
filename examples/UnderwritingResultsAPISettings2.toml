@import {
  PingFederateService.*
  Serilog.*
  SecurityEdgeService.*
  HealthCheckSettings.*
  MerchantVerificationUri
} from "./Defaults.json" 

# Env.fig will define the environments
# Fig will create a file for each environment
@import { env } from "./Env.fig"

# Import all the key/value pairs with ".*"

# Import specific key/value pairs by referencing them

# Set imported values like this
PingFederateService.Client_ID = "UnderwritingResults"
PingFederateService.Client_Secret = "${uwresultsSecret}"

# Or like this
# Notice these values are secrets, replaced with variables
# by the build process as usual
SecurityEdgeService
  AccessKey = "${uwresultsAK}"
  SecurityEdgeService.SigningKey = "${uwresultsSigningKey}"

# Variables are used for various purposes
# For example, in Defaults.json, appName could be used like this:
# "Serilog": {
#   "WriteTo": {
#     "Name": "File",
#     "Args": { "path": "./logs/${appName}.json"}
#   }
# }
# To set this, use the variables object
# If there are no variables, or that variable does not exist
# you will get an error!
Serilog.variables
  appName = "UnderwritingResultsAPI"
  useEnrichers = true

# New key/value pairs, introduced in this file

# Provide different values for each env, using the env header
Features
  UseNewFeature = [ env.dev=true, env.qa=true ]

# Or inject env names like a variable
# Here, "env" becomes the env name ("dev", "qa", etc)
$env_modifier = "-" + env
HierarchyBaseUri = "https://boarding${env_modifier}.clearent.net"

# Or define functions and use them
# Here, `env_specific_url()` appends the env name to the subdomain
HierarchyBaseUri = @env_specific_url("https://boarding.clearent.net")

# Arrays... still workshopping this one 😜
HealthCheckSettings.HealthCheckTasks = [
  {
    Type = SQLDatabase
    Name = "ClearentDatabaseConnection"
    ConnectionString = "${ConnectionStrings:ClearentConnectionString}"
  },
  {
    Type = SQLDatabase
    Name = "MerchantVerificationDatabaseConnection"
    ConnectionString = "${ConnectionStrings:MerchantVerification}"
  },
  {
    Type = CustomCode
    Name = "CryptoApi"
    IntervalBetweenRunInSeconds = 120
    Description = "Custom Health Check for Crypto API"
    Settings = {
      ShouldReturnFullStatusReportToInfo = true,
      CryptoApiUrl = "${SettlementCryptoBaseUri}"
    }
  }
]
